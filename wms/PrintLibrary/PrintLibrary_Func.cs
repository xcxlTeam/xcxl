using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Management;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace PrintLibrary
{
    public static class PrintLibrary_Func
    {
        private const string pukey = "XianDa00";
        private const string pvkey = "CombaWMS";

        private const string Logo200 = "~DGHeader.GRF,07680,080,,40H04041FLF040H040H040H040H040H040H040H040H040H0407FHFH040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040H040,L03FMFgY03FHF,K01FNFgY07FHF,K0PFgY03FHF,J03FOFgY07FHF,J07FOFgY03FHF,I01FPFgY07FHF,I03BFBFBFBFBFB0gX03FBF,I07FPFgY07FHF,I0RFgY03FHF,H03FQFgY07FHF,H03FFBFHFBFHFBF0gX03FFB,H07FQFgY07FHF,H0SFgY03FHF,01FRFM07FF0gN07FHFiM01,02BFBFBE0R03BHBA0gM03FBF0igK07E0Y03F007F0K0FC,3FIF80P01FPF8007FXFH07FHF01FKFC0I07FPFC0gK07C0Y03F01FC0J01F8,3BFHFR01FHFBFFBBFHF8007BFHFBFHFBFHFBFHFBFF803FFB01FBFHFBF0I0BFBFHFBFHFBFC0gK0FC0Y01FIFL01F8,7FIF40P03FJF47FIFC007FXF807FHF01FLFI01FQFC0ghO040H040N070R070gR04,gG03FHFE,gH07FF0,,:::::::::::::::::::::::";
        private const string Logo300 = "~DGHeader.GRF,14848,116,,20H020J02020202020202020H020H020H020H020H020H020H020H020H020H020H020H020H020H02AIA80020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020,P01FPF80hV03FIFC,O0BFQF80hV03FIFC,N01DFQF80hV03FFDFC,N0TF80hV03FIFC,M03FSF80hV03FIFC,M0UF80hV03FIFC,L017DFDFDFDFDFDFDF80hV03FDFDC,L0VF80hV03FIFC,K01FUF80hV03FIFC,K03FUF80hV03FIFC,K0D7FFDFHFDFHFDFHFD80hV03DFHFC,J01FVF80hV03FIFC,J03FVF80hV03FIFC,J0XF80hV03FIFC,J0DFDFDFDFDFDFDFDFDD80hV01FDFDC,2001FWF8020H020H020H020H020H020H020H020H020H020H020H020H020H020H03FIFC0020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020H020,I03FWF80hV03FIFC,I07FWF80hV03FIFC,I0JFDFHFHDOF80hV03FFDFC,I0YF80O02AA0hI03FIFC0hX02,H017FLFD70X03FIF80hG03FIFC0jY080,H03FMFE0X03FKF80h03FIFC0iW0H8M0H8Q0E0gL0H8L0I80,H05FDFDFDFDC0X07DFDFDFC0h03FDFDC0hW01FD0U01FF0K07FC0P0D0gK01DF0K0DF80,H07FLFE0X03FMF80M0202020202020H0202020202020L03FIFC0020202020R020H0202020202020g03FF0U01FF0K07FE0P0FC20gI01FE0K0HF80,H07FLF40X0OF50L01FQF60H03FMFM03FIFC007FIFC0U01FQF80Y03FF0U01FF0K07FC0P0HFC0H03FPFC0M03FE0K0HF80,H0MFE80W01FOF80K01FRF8003FMFE0K03FIFC00FKF80T0SF80Y03FF0U01FF0K07FC0P0IF8003FPFE0M03FE0K0HF80,H0IFDFHFC0X057FFDFHFID40K01FSFH03FNFC0J03DFHFC007DFFDFD0S05FDFPF80Y01FF0U01FE0K07FC0P0IFE003FQFN03FE0K0HF80,01FLFE0W01FQFL01FSFC23FNFE0J03FIFC00FLFE0Q03FSF80P020M03FF0U03FE0K07FC0P07FFE003FQF80L03FE0K0HF80,01FLFC0W01FQF80J01FSFC03FNFD0J03FIFC007FLFR07FSF80Y03FF0U03FE0K07FC0P07FFE003FQF80L03FC0K0HF80,03FLFY03FQFC0J01FTF83FNFEC0I03FIFC00FMF80O03FTF80P07FYF80K03FEFSFC0J01FFE003FQF80L03FCFSFC007DFDFDFC0X0DFDFDFDFDFDFDD0J01DFDFDFDFDFDFDHD41FDFDFDFDFDC0I01FDFDC005FDFDFDFC0O07DFDFDFDFDFDFDFD80P07DFHFDFHFDFHFDFHFDFHF80K07DCFFDFHFDFHFDFHFC0K0FDE0Q03FD80L07FDDFHFDFHFDFHFDFC027FKFE0H020H020H020H02023FSFA02001FTFE3FPF20203FIFC00FNF82020H0203FUF820H020H02007FYF80H02007FCFSFE0H02027FE0020N03FF0H020I0HF9FSFC007FKFC0W01FSF80I01FUF3FPFJ03FIFC007FMF80M01FUF80P07FYF80K07FCFSFC0K01FE0Q03FF0M0HF9FSFC00FLFC0W03FSFC0I01FUF3FPF80H03FIFC00FNFE0M07FUF80P07FYF80K0HF8FSFE0L0FE0Q07FE80L0HF1FSFC00FFDFIFY0JFDFHFDFHFDFFE0I01FHFDFHFDFHFDFHFDBFFDFHFDFIFC0H03FFDFC005FFDFKFM01FJFDFHFDFHFDFHF80P07FYF80K0HF8FSFC0M060Q0HFC0M0HF1FSFC00FLFY0VFJ01FUFBFPFE0H03FIFC00FOFM03FVF80P07FYF80K0HF20gO03E0H02FF80L01FF0,07FKFX01FUFJ01FgMFE0H03FIFC007FNFC0K03FVF80gW01FF0gO01FE0H07FF0M01FE0,0FKFE0W03FUF80H01FgMFE0H03FIFC00FOFE0K07FVF80gW01FF0gO01FF803FF80M03FE0,17DFDFDC0W05FDFDFDJDFDFDFDC0H01DFDFDFDFDFDFDFDFDFDFDFDFDFDFD0H03FDFDC005FDFDFDFDFC0K05DFDFDFDFDFDFDFDFD80gW01FE0gP0HF807FD0N03FC0,1FKFE0W07FUFE0H01FgNF0203FIFC00FPFK03FWF80gW03FE0gH020L07FJFC0N03FC0,1FKFC0W0MFE007FKFE0H01FgNFI03FIFC007FOFK017FVF80gW07FC0Y07FF0M03FIFE0O07FC0,1FKFC0W0MF8003FLFI01FgNF8003FIFC00FPF80I03FWF80ggG01FE003FC001FF0H07FC0J07FF80,3FKF80V0KFE0M0KFE001FIFE0L0KFM07FIF8003FIFC0M03FJF8003FIFE80M07FIF80S0HF80N08FFC0L07FF80gG01FE003FC001FF0H07FC0J0IF80,1FFDFHF80V0HFDFFC0M07FHFDE001FHFDE0L0IFDF0L05FFDFC003FFDFC0M01DFHFD8003FHFHDO07DFHF80S0HF80O07FC0L0IF80gG01FE003FC001FF0H07FC0I01FHF80,3FKF80V0KFC0M03FIFE001FIFE0L0KFM07FIF8003FIFC0N0KF8003FJF20M07FIF80S0HF80O07FE0L0IF80gG01FE003FC003FF0H03FC0I03FHF80,1FKF80V0KF80M03FJFH01FIFE0L0KFM07FIFC003FIFC0N0KFC003FJFO07FIF80S0HF80O07FC0K01FHF80gG01FE003FC001FF0H07FC0I03FHF80,1FKFC0V0KF80M03FJFH01FIFE0L0KFM07FIF8003FIFC0N0KFC003FIFE0N07FIF80S0HF80O07FC0K07FHF80ggG01FE003FC001FF0H07FC0H01F0FF80,0FKFE0U01FIFE0O0KF801FIFE0L0KFM07FIF8003FIFC0N03FIFE007FIF80N07FIF80S0HF80O07FC0J01F07F80gG01FE003FC001FF0H03FC0H01E0FF80,0FDFDFDD0U01DDFDE0O0DFDFD001DFDFC0L0DFDFD0L05FDFDC001FDFDC0N03DFDFC007DFDF80N05FDFD80S0HF80O07DC0J01C07F80gG01DE001FC001FF0H07DC0H01C0DF80,2FLFA0H020H020H020H03FIFE0020H020H0KF801FIFE0H020H0KF02020H07FIF8003FIFC0020H02003FIFE007FIFA0H020H0207FIF820H020H020H020FF82BFOFE002001A07F80H020H020H020H020H02001FE003FE001FF0H03FC0021A0FF8020H020H020H020,07FKF80T01FJFP0KFH01FIFE0L0KFM07FIFC003FIFC0N03FIFC007FIFP07FIF80S0UFC0J01807F80gG01FE003FC001FF0H07FC0H0100FF80,07FKFC0T01FJFP0KFH01FIFE0L0KFM07FIF8003FIFC0N07FIFC007FIFC0N07FIF80S0UFC0M07F80gG01FE003FC001FF0H07FC0K0HF80,07FDFIFE0T01FFDFD0O0IFDF001FHFDE0L0IFDF0L07FFDFC003FFDFC0N05FHFDC007FIFC0N07DFHF80S0UFC0M07F80ggG0HF801FC0M01FF,J02FVF80H02FUFJ01FIFE0L0KF020J07FIF8003FVF20K01FNFE007FIF80R01FF0I03FF0I03FF0M07F801FF0N0HFM03FFE0L020H020N0HF801FE0M01FF,K03FUF80I07FSFC0I01FIFE0L0KFM07FIFC003FUF40M07FMFE007FIF80R03FF0I03FF0I01FF80L07F801FF0N0HFL01FJFg0HF801FE0M01FF,L0VF80I03FSF80I01FIFE0L0KFM07FIF8003FUF80M03FMFE007FIF80R0HFE0I03FF0J0HFC0L07F800FF0N0HFL0MFC0W0HF801FE0M01FF,L05FFDFHFDFHFDFHFD80I01FDFHFDFHFDFIFK01FDFFE0L0FDFHFM07DFHFC003DFHFDFHFDFHFDFHFO01FFDFHFDFE007FFDF80R0HFC0I03FE0J07FC0L07F801FF0N0HFK01FMFC0V0HF801FE0M01FF,L03FTF80I02FSFK01FIFE0L0KFM07FIF8003FTFE0O0NFE007FIF80Q03FFA0I03FE0J03FF0L07F801FF0N0HFK01FYF80J0HF801FE0M01FF,M07FSF80J0H7QFC0J01FIFE0L0KFM07FIFC003FTFQ07FLFE007FIF80Q0IFK03FE0J01FFC0K07F801FRFK01FYF80J0HF801FRF,M0BFSF80J03FQF80J01FIFE0L0KFM07FIF8003FTF80O03FLFE007FIF80P03FFE0J0HFE0J01FHFL07F800FRFK01FYF80J0HF801FRF,N0DFHFDFDFDFDFDD80J01DDFDFDFDFDHDL01DFDFC0L0DFDFD0L05FDFDC001FDFDFDFDFDFDFDC0Q05DFFDFDE005FDFD80P07DF80I0FDFC0K07FF80J07F801FDFHFDFHFDFHFK01FF007FDFHFDFHFDFHFDF80J0DF801FHFDFHFDFHFDF,20H020H03FRF8020H02FPFE0H02021FIFE0H020H0KFI020H07FIF8203FRFE020H020H020H02FKFE207FIF820H020H02007FF00203FHF8020H023FFA0H0207F801FRFJ021F80023FSF8020H0HF803FRF,O01FQF80K01FOF80K01FIFE0L0KFM07FIFC003FRFU03FJFE007FIF80P07F80I03FFE0M07FC0J07F801FRFK01C0J03FRF80J0HF801FRF,P03FPF80L0PF80K01FIFE0L0KFM07FIF8003FQFA0U0KFE007FIF80P0HF80I03FFE0M03FC0J07F800FRFK0180K0SF80J0HF801FRF,gP03DFHFIDFC0jT0FC0K0H4P07C0gX0P4,gO020FLFE0jU080Y060,gQ037FIF7C0,gR0KFE,gS01DD,,::::::::::::::::::::::";

        private const string Rohs200 = "~DGROHS.GRF,00768,012,,::1FgGF810g010180g081C0Y018180g0810g010180T03C0I081C001DFC0I01C041DF8001818001E3E0I0380E1EF80H0810H014070I014061010H01018001E0F80H01C0E38380H081C001C050I01C041C0I01818001E0703F0380E3E0J0810H01416177017761740H01018001FFE1E1E3FFE0FE0I081C001DD01C041C0400D8001818001E78380E380E00380H0810H01410100614063014001018001E1C1C0E1C0E381C0H081C001C0C1C0C1C04181C001818001E0E1F38380E3E780H0810H01407077014061770H010180M0C0K0180I081C0Y018180g0810g010180g081C0Y018180g0810g010180g081C0Y018180g0810g0101FgGF8,:::::::::::::::::::::::::";
        private const string Rohs300 = "~DGROHS.GRF,01920,020,,::01101H101H101H101H101H101H101H1011,,03FgQFC0,02EgQE80,0140gO01C0,0380gP080,0340gO01C0,020gQ080,0140gO01C0,0380gP080,0340gO01C0,020gQ080,0140gH0FC0J01C0,0380gH0B80K080,0340I07FHFM01F007C07FF40I01C0,020J06FEEC0L0E006C0EHEC0J080,0140I07C1FE0K01F007C1F97C0I01C0,0380I03803A0K01A00381A03A0J080,0340I07C01F0K01F007C7C01F0I01C0,020J06800E0L0E002C2C02E0J080,0140I07C01F0K01F007C7C01F0I01C0,0380I03800B0K01A0038380M080,0340I07C01F0K01F007C7D0L01C0,020J06801E007E801E007C2E0M080,0140I07C01F01FHF01F007C1FC0K01C0,0380I03801A01BBA01A00380B80L080,0340I07C17E07F7F01FIFC0FFC0J01C0,020J06EHEC06C0E80EIEC02EE0K080,0140I07FHFH0F807C1FIFC007FC0I01C0,0380I03BBA00A80381A00380H0BA0J080,0340I07C3E01F005C1F007C0H07F0I01C0,020J0682E02E003C0E006C0H02E0J080,0140I07C1F01F005C1F007C0H01F0I01C0,0380I0380B00A00181A00383800B0J080,0340I07C1741F005C1F007C7C01F0I01C0,020J06802C0E802C0E002C6800E0J080,0140I07C07C1F005C1F007C7C01F0I01C0,0380I0380380B80381A00383801B0J080,0340I07C07E07C0FC1F007C7D01F0I01C0,020J06803E02E0E81E007C2E86E0J080,0140I07C01F03FHF01F007C1FHFC0I01C0,0380I03800B80BBA01A003803BB0K080,0340I07C01F01FFC01F007C07FF40I01C0,020R0E0O0680K080,0140gO01C0,0380gP080,0340gO01C0,020gQ080,0140gO01C0,0380gP080,0340gO01C0,020gQ080,0140gO01C0,0380gP080,0340gO01C0,020gQ080,0140gO01C0,0380gP080,0340gO01C0,020gQ080,0140gO01C0,0380gP080,034gP45C0,02EEFEHEFEHEFEHEFEHEFEHEFEHEFEHEFE80,01FgQFC0,,H0gS40,,:::::::::::::::::::::::::";

        #region Basic

        /// <summary>
        /// 写文件
        /// *目录不存在创建目录*
        /// </summary>
        /// <param name="Strings">文件内容</param>
        /// <param name="Path">文件路径</param>
        public static void WriteDirFile(string Strings, string Path = "")
        {
            if (string.IsNullOrEmpty(Path))
            {
                Path = Environment.CurrentDirectory + "\\log.txt";
            }
            Path = Path.Trim('\\');
            string Dir = Path.Remove(Path.LastIndexOf("\\"), Path.Length - Path.LastIndexOf("\\"));
            if (!System.IO.Directory.Exists(Dir))
            {
                System.IO.Directory.CreateDirectory(Dir);
            }

            if (!System.IO.File.Exists(Path))
            {
                System.IO.FileStream f = System.IO.File.Create(Path);
                f.Close();
                f.Dispose();
            }
            System.IO.StreamWriter f2 = new System.IO.StreamWriter(Path, true, System.Text.Encoding.UTF8);
            f2.WriteLine(Strings);
            f2.Close();
            f2.Dispose();

        }

        /// <summary>
        /// 获取打印机的当前状态
        /// </summary>
        /// <param name="PrinterName">打印机设备名称</param>
        /// <returns>打印机状态</returns>
        public static PrinterStatus GetPrinterStatus(string PrinterName)
        {
            try
            {
                PrinterStatus ret = 0;
                string path = @"win32_printer.DeviceId='" + PrinterName + "'";
                ManagementObject printer = new ManagementObject(path);
                printer.Get();
                ret = (PrinterStatus)Convert.ToInt32(printer.Properties["PrinterStatus"].Value);
                return ret;
            }
            catch (Exception ex)
            {
                if (ex.Message.ToLower().Trim() == "not found")
                    return PrinterStatus.未找到;
                else
                    return PrinterStatus.错误;
            }
        }

        public static bool GetPrinterLinkStatus(string PrinterName)
        {
            try
            {
                //PrinterStatus ps = GetPrinterStatus(PrinterName);
                //if (ps == PrinterStatus.未找到 || ps == PrinterStatus.错误) return false;

                // Set management scope
                ManagementScope scope = new ManagementScope(@"\root\cimv2");
                scope.Connect();

                // Select Printers from WMI Object Collections
                //string sql = string.Format("SELECT * FROM Win32_Printer WHERE DeviceId = '{0}'", PrinterName);
                string sql = "SELECT * FROM Win32_Printer";
                ManagementObjectSearcher searcher = new ManagementObjectSearcher(sql);

                string printerName = "";
                string printerDevice = "";
                foreach (ManagementObject printer in searcher.Get())
                {
                    printerName = printer["Name"].ToString();
                    printerDevice = printer["DeviceId"].ToString();
                    if ((string.IsNullOrEmpty(printerName) ? printerDevice : printerName).ToLower() != PrinterName.ToLower()) continue;
                    if (printer["WorkOffline"].ToString().ToLower().Equals("true"))
                    {
                        return true;
                    }
                }

                return false;
            }
            catch
            {
                return false;
            }
        }

        public static bool GetPrinterList(ref List<string> lstPrinter, bool HaveNoConnected = false)
        {
            try
            {
                lstPrinter = new List<string>();

                // Set management scope
                ManagementScope scope = new ManagementScope(@"\root\cimv2");
                scope.Connect();

                // Select Printers from WMI Object Collections
                string sql = "SELECT * FROM Win32_Printer";
                ManagementObjectSearcher searcher = new ManagementObjectSearcher(sql);

                string printerName = "";
                string printerDevice = "";
                foreach (ManagementObject printer in searcher.Get())
                {
                    printerName = printer["Name"].ToString();
                    printerDevice = printer["DeviceId"].ToString();
                    if (printer["WorkOffline"].ToString().ToLower().Equals("true"))
                    {
                        lstPrinter.Add(printerName);
                    }
                    else
                    {
                        if (HaveNoConnected) lstPrinter.Add(string.IsNullOrEmpty(printerName) ? printerDevice : printerName);
                    }
                }

                return lstPrinter.Count >= 1;
            }
            catch
            {
                return false;
            }
        }

        public static T ConvertToModel<T>(object model) where T : new()
        {
            T t = new T();
            if (typeof(T).Name != model.GetType().Name) return t;

            PropertyInfo[] arrMPi = model.GetType().GetProperties();
            PropertyInfo[] arrPi = t.GetType().GetProperties();

            PropertyInfo temp = null;
            foreach (PropertyInfo pi in arrPi)
            {
                temp = arrMPi.FirstOrDefault<PropertyInfo>(p => p.Name == pi.Name);
                if (temp == null) continue;
                try
                {
                    pi.SetValue(t, temp.GetValue(model, null), null);
                }
                catch { }
            }

            return t;
        }

        public static Dictionary<string, object> GetModelProertyInfo(object model)
        {
            Dictionary<string, object> dic = new Dictionary<string, object>();
            PropertyInfo[] arrPi = model.GetType().GetProperties();

            foreach (PropertyInfo pi in arrPi)
            {
                if (!dic.ContainsKey(pi.Name))
                {
                    dic.Add(pi.Name.ToUpper(), pi.GetValue(model, null));
                }
            }

            return dic;
        }

        public static string RemovePex(string barcode)
        {
            return barcode.Replace("A@", "").Replace("B@", "").Replace("T@", "").Trim();
        }

        public static string JiaMi(string barcode)
        {
            try
            {
                if (string.IsNullOrEmpty(barcode))
                {

                    return "";

                }

                string strCipherText = "";
                DESCryptoServiceProvider des = new DESCryptoServiceProvider();
                byte[] inputByteArray;
                inputByteArray = Encoding.Default.GetBytes(barcode);
                des.Key = Encoding.Default.GetBytes(pukey);
                des.IV = Encoding.Default.GetBytes(pvkey);
                System.IO.MemoryStream ms = new System.IO.MemoryStream();
                CryptoStream cs = new CryptoStream(ms, des.CreateEncryptor(), CryptoStreamMode.Write);
                cs.Write(inputByteArray, 0, inputByteArray.Length);
                cs.FlushFinalBlock();
                StringBuilder ret = new StringBuilder();
                foreach (byte b in ms.ToArray())
                {
                    ret.AppendFormat("{0:X2}", b);
                }
                strCipherText = ret.ToString();
                return strCipherText;
            }
            catch
            {
                return "";

            }
        }

        public static string JieMi(string barcode)
        {
            barcode = RemovePex(barcode);

            if (string.IsNullOrEmpty(barcode))
            {

                return "";

            }

            try
            {
                if (string.IsNullOrEmpty(barcode) || barcode.Length <= 0)
                    return null;

                DESCryptoServiceProvider des = new DESCryptoServiceProvider();
                int len;
                len = barcode.Length / 2;
                byte[] inputByteArray = new byte[len];
                int x, i;
                for (x = 0; x < len; x++)
                {
                    i = Convert.ToInt32(barcode.Substring(x * 2, 2), 16);
                    inputByteArray[x] = (byte)i;
                }
                des.Key = ASCIIEncoding.ASCII.GetBytes(pukey);
                des.IV = ASCIIEncoding.ASCII.GetBytes(pvkey);
                System.IO.MemoryStream ms = new System.IO.MemoryStream();
                CryptoStream cs = new CryptoStream(ms, des.CreateDecryptor(), CryptoStreamMode.Write);
                cs.Write(inputByteArray, 0, inputByteArray.Length);
                cs.FlushFinalBlock();
                return Encoding.Default.GetString(ms.ToArray());
            }
            catch
            {
                return "";

            }
        }

        public static int SpiltString(string text, int length, ref string[] arr)
        {
            if (string.IsNullOrEmpty(text))
            {
                arr[0] = " ";
                return 1;
            }

            int count = 0;
            byte[] bytes = Encoding.GetEncoding(936).GetBytes(text);
            count = (int)Math.Ceiling(Convert.ToDouble(bytes.Length) / Convert.ToDouble(length));
            Array.Resize(ref arr, count);

            bool bBorrow = false;
            string strLine;
            string strTemp;
            char cEnd;

            if (count == 1)
            {
                arr[0] = text;
            }
            else
            {
                for (int i = 0; i < count; i++)
                {
                    byte[] line = new byte[length + 1];
                    int cur = 0;
                    for (int j = 0; j < length; j++)
                    {
                        if (bBorrow && j == 0) continue;

                        cur = i * length + j;
                        if (cur >= bytes.Length) break;

                        line[j] = bytes[cur];
                    }

                    bBorrow = false;
                    strLine = Encoding.GetEncoding(936).GetString(line).Trim('\0');
                    if (!string.IsNullOrEmpty(strLine) && strLine.Length >= 2)
                    {
                        strTemp = strLine.Substring(0, strLine.Length - 1);
                        if (!string.IsNullOrEmpty(strTemp))
                        {
                            cEnd = text[text.IndexOf(strTemp) + strTemp.Length];

                            if (strLine[strLine.Length - 1] != cEnd)
                            {
                                strLine = strTemp + cEnd;
                                bBorrow = true;
                            }
                        }
                    }

                    arr[i] = strLine;
                }
            }

            return count;
        }

        #endregion

        #region ZPL

        #region 原材料收货内盒标签
        public static bool PrintPurchaseReceiveInnerByBarcode(Barcode_Model barcode, string strPrinterName, int dpi = 300)
        {
            string strPrint = GetPurchaseReceiveInnerPrintStr(barcode);

            if (string.IsNullOrEmpty(strPrint)) return false;

            return RawPrinterHelper.SendStringToPrinter(strPrinterName, strPrint);
        }

        public static string GetPurchaseReceiveInnerPrintStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            sbPrint.Append(GetPurchaseReceiveInnerLogoStr(dpi));

            sbPrint.Append(GetPurchaseReceiveInnerContentStr(barcode, dpi));

            sbPrint.Append(GetPurchaseReceiveInnerClearStr());

            return sbPrint.ToString();
        }

        public static string GetPurchaseReceiveInnerContentStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            Point Start;
            int Width = 0;
            int Heigh = 0;

            string BasicFontName = "黑体";
            int BasicFontSize = 1;

            int BaiscColMargin = 0;
            int BasicRowHeigh = 0;
            int MinRowMargin = 0;
            int Line = 0;

            int PictrueTopPad = 0;
            int PictrueRightPad = 0;
            int ROHSMarginQR = 0;
            int QRCodeSize = 0;

            int CheckedMargin = 0;
            int CheckedOffset = 0;

            string strVoucher = string.IsNullOrEmpty(barcode.ROWNO) ? barcode.VOUCHERNO : string.Format("{0} - {1}", barcode.VOUCHERNO, barcode.ROWNO);

            #endregion


            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter

                        Start = new Point(0, 50);
                        Width = 630;
                        Heigh = 472;

                        BasicFontName = "黑体";
                        BasicFontSize = 8;

                        BaiscColMargin = 150;
                        BasicRowHeigh = 30;
                        MinRowMargin = 10;

                        PictrueTopPad = 80;
                        PictrueRightPad = 150;
                        ROHSMarginQR = 180;
                        QRCodeSize = 4;

                        CheckedMargin = 100;
                        CheckedOffset = 0;

                        #endregion

                    }
                    break;

                case 300:
                    {
                        #region Parameter

                        Start = new Point(20, 50);
                        Width = 945;
                        Heigh = 705;

                        BasicFontName = "黑体";
                        BasicFontSize = 12;

                        BaiscColMargin = 230;
                        BasicRowHeigh = 45;
                        MinRowMargin = 15;

                        PictrueTopPad = 120;
                        PictrueRightPad = 220;
                        ROHSMarginQR = 270;
                        QRCodeSize = 7;

                        CheckedMargin = 150;
                        CheckedOffset = 0;

                        #endregion

                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Content
            fcb.GETFONTHEX(barcode.DELIVERYNO, false, BasicFontName, "txtDeliveryNo", (BasicFontSize - 2) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.CUSNAME, false, BasicFontName, "txtCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SUPNAME, false, BasicFontName, "txtSupName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SUPCODE, false, BasicFontName, "txtSupCode", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE1, false, BasicFontName, "txtMaterialDesc1", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE2, false, BasicFontName, "txtMaterialDesc2", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.QTY.ToString("0"), false, BasicFontName, "txtQuantity", (BasicFontSize) * 3, 0, true, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALNO, false, BasicFontName, "txtMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.PRDVERSION, false, BasicFontName, "txtVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strVoucher, false, BasicFontName, "txtVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.BATCHNO, false, BasicFontName, "txtBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SN, false, BasicFontName, "txtSN", (BasicFontSize - 1) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SERIALNO, false, BasicFontName, "txtSerialno", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            #region Code
            sbPrint.Append("^XA");
            sbPrint.AppendFormat("^PW{0}^LL{1}", Width, Heigh);

            //送货单号
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtDeliveryNo^FS", Width - PictrueRightPad, Start.Y - MinRowMargin);


            Line = 0;   //客户名称
            //sbPrint.AppendFormat("^FT{0},{1}^XGlblCusName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            //sbPrint.AppendFormat("^FT{0},{1}^XGtxtCusName^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtCusName^FS", Start.X, Start.Y + BasicRowHeigh * Line);

            Line = 1;   //供应商名称
            //sbPrint.AppendFormat("^FT{0},{1}^XGlblSupName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            //sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupName^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            if (barcode.BSHOWSUP || barcode.SHOWSUP == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            }

            Line = 2;   //供应商代码
            //sbPrint.AppendFormat("^FT{0},{1}^XGlblSupCode^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            //sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupCode^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupCode^FS", Start.X, Start.Y + BasicRowHeigh * Line);

            Line = 3;   //物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialDesc^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc1^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 4;   //第二行物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc2^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 5;   //数量
            sbPrint.AppendFormat("^FT{0},{1}^XGlblQuantity^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtQuantity^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 6;   //物料编码
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 7;   //产品版本
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVersion^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVersion^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 8;   //采购单号 - 行号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVoucherNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVoucherNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 9;   //镀层物料
            sbPrint.AppendFormat("^FT{0},{1}^XGlblPlated^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedSilver^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedTin^FS", Start.X + BaiscColMargin + CheckedMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedOther^FS", Start.X + BaiscColMargin + 2 * CheckedMargin, Start.Y + BasicRowHeigh * Line);
            //勾选
            if (barcode.BPlatedSilver || barcode.PLATEDSILVER == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }
            else if (barcode.BPlatedTin || barcode.PLATEDTIN == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin + CheckedMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }
            else if (barcode.BPlatedOther || barcode.OTHERS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin + 2 * CheckedMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }

            Line = 10;  //生产批号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblBatchNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtBatchNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            #region Picture
            //ROHS
            if (barcode.BIsRoSH || barcode.ISROHS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGROHS.GRF,1,1^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad);
            }

            //二维码
            sbPrint.AppendFormat("^FT{0},{1}^BQN,2,{2},H^FDMA,{3}^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad + ROHSMarginQR - MinRowMargin, QRCodeSize, barcode.BARCODE);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSerialno^FS", Width - PictrueRightPad - dpi / 5, Start.Y + PictrueTopPad + ROHSMarginQR + MinRowMargin * 3);

            #endregion


            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        public static string GetPurchaseReceiveInnerLogoStr(int dpi = 300, int type = 70)
        {
            StringBuilder sbPrint = new StringBuilder();
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            string basicFontName = string.Empty;
            int basicFontSize = 1;

            string lblVoucherNoText;
            switch (type)
            {
                //case 70:
                //    lblVoucherNoText = "采购单号：";
                //    break;

                default:
                    lblVoucherNoText = " ";
                    break;
            }

            switch (dpi)
            {
                case 200:
                    {
                        #region Ready
                        basicFontName = "黑体";
                        basicFontSize = 8;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs200);

                        #endregion
                    }
                    break;

                case 300:
                    {
                        #region Ready
                        basicFontName = "黑体";
                        basicFontSize = 12;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs300);

                        #endregion
                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Title
            fcb.GETFONTHEX("客户名称：", false, basicFontName, "lblCusName", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("供应商名称：", false, basicFontName, "lblSupName", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("供应商代码：", false, basicFontName, "lblSupCode", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料描述：", false, basicFontName, "lblMaterialDesc", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("数　　量：", false, basicFontName, "lblQuantity", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料编码：", false, basicFontName, "lblMaterialNo", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("产品版本：", false, basicFontName, "lblVersion", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(lblVoucherNoText, false, basicFontName, "lblVoucherNo", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("镀层物料：", false, basicFontName, "lblPlated", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口镀银", false, basicFontName, "cbxPlatedSilver", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口镀锡", false, basicFontName, "cbxPlatedTin", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口其他", false, basicFontName, "cbxPlatedOther", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("■", false, basicFontName, "cbxChecked", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产批号：", false, basicFontName, "lblBatchNo", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            return sbPrint.ToString();
        }

        public static string GetPurchaseReceiveInnerClearStr()
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Delete
            sbPrint.Append("^XA");
            sbPrint.Append("^IDR:ROHS.GRF^FS");
            sbPrint.Append("^IDR:lblCusName^FS");
            sbPrint.Append("^IDR:lblSupName^FS");
            sbPrint.Append("^IDR:lblSupCode^FS");
            sbPrint.Append("^IDR:lblMaterialDesc^FS");
            sbPrint.Append("^IDR:lblQuantity^FS");
            sbPrint.Append("^IDR:lblMaterialNo^FS");
            sbPrint.Append("^IDR:lblVersion^FS");
            sbPrint.Append("^IDR:lblVoucherNo^FS");
            sbPrint.Append("^IDR:lblBatchNo^FS");
            sbPrint.Append("^IDR:lblOutQty^FS");
            sbPrint.Append("^IDR:lblOutStatus^FS");

            sbPrint.Append("^IDR:txtDeliveryNo^FS");
            sbPrint.Append("^IDR:txtCusName^FS");
            sbPrint.Append("^IDR:txtSupName^FS");
            sbPrint.Append("^IDR:txtSupCode^FS");
            sbPrint.Append("^IDR:txtMaterialDesc1^FS");
            sbPrint.Append("^IDR:txtMaterialDesc2^FS");
            sbPrint.Append("^IDR:txtQuantity^FS");
            sbPrint.Append("^IDR:txtMaterialNo^FS");
            sbPrint.Append("^IDR:txtVersion^FS");
            sbPrint.Append("^IDR:txtVoucherNo^FS");
            sbPrint.Append("^IDR:txtBatchNo^FS");
            sbPrint.Append("^IDR:txtSerialno^FS");
            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        #endregion

        #region 原材料收货外箱标签

        public static bool PrintDeliveryReceiceOutBarcode(Barcode_Model barcode, string strPrinterName, int dpi = 300)
        {
            string strPrint = GetDeliveryReceiceOutPrintStr(barcode, dpi);

            if (string.IsNullOrEmpty(strPrint)) return false;

            return RawPrinterHelper.SendStringToPrinter(strPrinterName, strPrint);
        }

        public static string GetDeliveryReceiceOutPrintStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            sbPrint.Append(GetDeliveryReceiceOutLogoStr(dpi)).Append(Environment.NewLine);

            sbPrint.Append(GetDeliveryReceiceOutContentStr(barcode, dpi)).Append(Environment.NewLine);

            sbPrint.Append(GetDeliveryReceiceOutClearStr()).Append(Environment.NewLine);

            return sbPrint.ToString();
        }


        public static string GetDeliveryReceiceOutContentStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            Point Start;
            int Width = 0;
            int Heigh = 0;

            string BasicFontName = "黑体";
            int BasicFontSize = 1;

            int BaiscColMargin = 0;
            int BasicRowHeigh = 0;
            int MinRowMargin = 0;
            int Line = 0;

            int PictrueTopPad = 0;
            int PictrueRightPad = 0;
            int ROHSMarginQR = 0;
            int QRCodeSize = 0;

            int CheckedMargin = 0;
            int CheckedOffset = 0;

            int RemarkMargin = 0;

            string strVoucher = string.IsNullOrEmpty(barcode.ROWNO) ? barcode.VOUCHERNO : string.Format("{0} - {1}", barcode.VOUCHERNO, barcode.ROWNO);
            string strOutQty = string.Format("内装{0}小箱，每小箱{1}只，尾数{2}只", barcode.INNERCOUNT, barcode.INNERPACKQTY, barcode.MANTISSAQTY);
            string strOutSum = string.Format("本箱包装量{0}只", barcode.OUTPACKQTY);
            string strOutStatus = string.Format("共{0}大箱，共{1}只，本箱为第{2}大箱", barcode.OUTCOUNT, barcode.BATCHQTY, barcode.BARCODENO);

            #endregion


            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter

                        Start = new Point(0, 50);
                        Width = 630;
                        Heigh = 472;

                        BasicFontName = "黑体";
                        BasicFontSize = 8;

                        BaiscColMargin = 150;
                        BasicRowHeigh = 30;
                        MinRowMargin = 10;

                        PictrueTopPad = 80;
                        PictrueRightPad = 150;
                        ROHSMarginQR = 180;
                        QRCodeSize = 4;

                        CheckedMargin = 100;
                        CheckedOffset = 0;

                        RemarkMargin = 15;
                        #endregion

                    }
                    break;

                case 300:
                    {
                        #region Parameter

                        Start = new Point(20, 50);
                        Width = 945;
                        Heigh = 705;

                        BasicFontName = "黑体";
                        BasicFontSize = 12;

                        BaiscColMargin = 230;
                        BasicRowHeigh = 45;
                        MinRowMargin = 15;

                        PictrueTopPad = 120;
                        PictrueRightPad = 220;
                        ROHSMarginQR = 270;
                        QRCodeSize = 7;

                        CheckedMargin = 150;
                        CheckedOffset = 0;

                        RemarkMargin = 30;
                        #endregion

                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Content
            fcb.GETFONTHEX(barcode.DELIVERYNO, false, BasicFontName, "txtDeliveryNo", (BasicFontSize - 2) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.CUSNAME, false, BasicFontName, "txtCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SUPNAME, false, BasicFontName, "txtSupName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SUPCODE, false, BasicFontName, "txtSupCode", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE1, false, BasicFontName, "txtMaterialDesc1", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE2, false, BasicFontName, "txtMaterialDesc2", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.QTY.ToString("0"), false, BasicFontName, "txtQuantity", (BasicFontSize) * 3, 0, true, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALNO, false, BasicFontName, "txtMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.PRDVERSION, false, BasicFontName, "txtVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strVoucher, false, BasicFontName, "txtVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.BATCHNO, false, BasicFontName, "txtBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strOutQty, false, BasicFontName, "txtOutQty", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strOutSum, false, BasicFontName, "txtOutSum", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strOutStatus, false, BasicFontName, "txtOutStatus", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SN, false, BasicFontName, "txtSN", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SERIALNO, false, BasicFontName, "txtSerialno", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            #region Code
            sbPrint.Append("^XA");
            sbPrint.AppendFormat("^PW{0}^LL{1}", Width, Heigh);

            //送货单号
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtDeliveryNo^FS", Width - PictrueRightPad, Start.Y - MinRowMargin);


            Line = 0;   //客户名称
            //sbPrint.AppendFormat("^FT{0},{1}^XGlblCusName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            //sbPrint.AppendFormat("^FT{0},{1}^XGtxtCusName^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtCusName^FS", Start.X, Start.Y + BasicRowHeigh * Line);

            Line = 1;   //供应商名称
            //sbPrint.AppendFormat("^FT{0},{1}^XGlblSupName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            //sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupName^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            if (barcode.BSHOWSUP || barcode.SHOWSUP == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            }

            Line = 2;   //供应商代码
            //sbPrint.AppendFormat("^FT{0},{1}^XGlblSupCode^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            //sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupCode^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupCode^FS", Start.X, Start.Y + BasicRowHeigh * Line);

            Line = 3;   //物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialDesc^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc1^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 4;   //第二行物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc2^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 5;   //数量
            sbPrint.AppendFormat("^FT{0},{1}^XGlblQuantity^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtQuantity^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 6;   //物料编码
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 7;   //产品版本
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVersion^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVersion^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 8;   //采购单号 - 行号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVoucherNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVoucherNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 9;   //镀层物料
            sbPrint.AppendFormat("^FT{0},{1}^XGlblPlated^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedSilver^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedTin^FS", Start.X + BaiscColMargin + CheckedMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedOther^FS", Start.X + BaiscColMargin + 2 * CheckedMargin, Start.Y + BasicRowHeigh * Line);
            //勾选
            if (barcode.BPlatedSilver || barcode.PLATEDSILVER == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }
            else if (barcode.BPlatedTin || barcode.PLATEDTIN == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin + CheckedMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }
            else if (barcode.BPlatedOther || barcode.OTHERS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin + 2 * CheckedMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }

            Line = 10;  //生产批号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblBatchNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtBatchNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 11;  //本箱数量
            sbPrint.AppendFormat("^FT{0},{1}^XGlblOutQty^FS", Start.X, Start.Y + BasicRowHeigh * Line + RemarkMargin);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtOutQty^FS", (Start.X + BaiscColMargin), Start.Y + BasicRowHeigh * Line + RemarkMargin);

            Line = 12;  //本箱总数
            //sbPrint.AppendFormat("^FT{0},{1}^XGtxtOutSum^FS", Start.X, Start.Y + BasicRowHeigh * Line + RemarkMargin);

            //Line = 13;  //本批情况
            sbPrint.AppendFormat("^FT{0},{1}^XGlblOutStatus^FS", Start.X, Start.Y + BasicRowHeigh * Line + RemarkMargin);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtOutStatus^FS", (Start.X + BaiscColMargin), Start.Y + BasicRowHeigh * Line + RemarkMargin);

            #region Picture
            //ROHS
            if (barcode.BIsRoSH || barcode.ISROHS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGROHS.GRF,1,1^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad);
            }

            //二维码
            sbPrint.AppendFormat("^FT{0},{1}^BQN,2,{2},H^FDMA,{3}^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad + ROHSMarginQR - MinRowMargin, QRCodeSize, barcode.BARCODE);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSerialno^FS", Width - PictrueRightPad - dpi / 5, Start.Y + PictrueTopPad + ROHSMarginQR + MinRowMargin * 3);

            #endregion


            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        public static string GetDeliveryReceiceOutLogoStr(int dpi = 300, int type = 10)
        {
            StringBuilder sbPrint = new StringBuilder();
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            string basicFontName = string.Empty;
            int basicFontSize = 1;

            string lblVoucherNoText;
            switch (type)
            {
                //case 10:
                //    lblVoucherNoText = "采购单号：";
                //    break;

                //case 50:
                //case 60:
                //    lblVoucherNoText = "快速入单号：";
                //    break;

                default:
                    lblVoucherNoText = " ";
                    break;
            }

            switch (dpi)
            {
                case 200:
                    {
                        #region Ready
                        basicFontName = "黑体";
                        basicFontSize = 8;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs200);

                        #endregion
                    }
                    break;

                case 300:
                    {
                        #region Ready
                        basicFontName = "黑体";
                        basicFontSize = 12;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs300);

                        #endregion
                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Title
            fcb.GETFONTHEX("客户名称：", false, basicFontName, "lblCusName", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("供应商名称：", false, basicFontName, "lblSupName", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("供应商代码：", false, basicFontName, "lblSupCode", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料描述：", false, basicFontName, "lblMaterialDesc", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("数　　量：", false, basicFontName, "lblQuantity", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料编码：", false, basicFontName, "lblMaterialNo", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("产品版本：", false, basicFontName, "lblVersion", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(lblVoucherNoText, false, basicFontName, "lblVoucherNo", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("镀层物料：", false, basicFontName, "lblPlated", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口镀银", false, basicFontName, "cbxPlatedSilver", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口镀锡", false, basicFontName, "cbxPlatedTin", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口其他", false, basicFontName, "cbxPlatedOther", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("■", false, basicFontName, "cbxChecked", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产批号：", false, basicFontName, "lblBatchNo", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("本箱数量：", false, basicFontName, "lblOutQty", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("本批情况：", false, basicFontName, "lblOutStatus", (basicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            return sbPrint.ToString();
        }

        public static string GetDeliveryReceiceOutClearStr()
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Delete
            sbPrint.Append("^XA");
            sbPrint.Append("^IDR:ROHS.GRF^FS");
            sbPrint.Append("^IDR:lblCusName^FS");
            sbPrint.Append("^IDR:lblSupName^FS");
            sbPrint.Append("^IDR:lblSupCode^FS");
            sbPrint.Append("^IDR:lblMaterialDesc^FS");
            sbPrint.Append("^IDR:lblQuantity^FS");
            sbPrint.Append("^IDR:lblMaterialNo^FS");
            sbPrint.Append("^IDR:lblVersion^FS");
            sbPrint.Append("^IDR:lblVoucherNo^FS");
            sbPrint.Append("^IDR:lblPlated^FS");
            sbPrint.Append("^IDR:cbxPlatedSilver^FS");
            sbPrint.Append("^IDR:cbxPlatedTin^FS");
            sbPrint.Append("^IDR:cbxPlatedOther^FS");
            sbPrint.Append("^IDR:cbxChecked^FS");
            sbPrint.Append("^IDR:lblBatchNo^FS");
            sbPrint.Append("^IDR:lblOutQty^FS");
            sbPrint.Append("^IDR:lblOutStatus^FS");

            sbPrint.Append("^IDR:txtDeliveryNo^FS");
            sbPrint.Append("^IDR:txtCusName^FS");
            sbPrint.Append("^IDR:txtSupName^FS");
            sbPrint.Append("^IDR:txtSupCode^FS");
            sbPrint.Append("^IDR:txtMaterialDesc1^FS");
            sbPrint.Append("^IDR:txtMaterialDesc2^FS");
            sbPrint.Append("^IDR:txtQuantity^FS");
            sbPrint.Append("^IDR:txtMaterialNo^FS");
            sbPrint.Append("^IDR:txtVersion^FS");
            sbPrint.Append("^IDR:txtVoucherNo^FS");
            sbPrint.Append("^IDR:txtBatchNo^FS");
            sbPrint.Append("^IDR:txtOutQty^FS");
            sbPrint.Append("^IDR:txtOutSum^FS");
            sbPrint.Append("^IDR:txtOutStatus^FS");
            sbPrint.Append("^IDR:txtSerialno^FS");
            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }
        #endregion

        #region 生产订单半成品外箱标签

        public static bool PrintProductionOrderOutBarcode(Barcode_Model barcode, string strPrinterName, int dpi = 300)
        {
            string strPrint = GetProductionOrderOutPrintStr(barcode, dpi);

            if (string.IsNullOrEmpty(strPrint)) return false;

            return RawPrinterHelper.SendStringToPrinter(strPrinterName, strPrint);
        }

        public static string GetProductionOrderOutPrintStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            sbPrint.Append(GetProductionOrderOutLogoStr(dpi));

            sbPrint.Append(GetProductionOrderOutContentStr(barcode, dpi));

            sbPrint.Append(GetProductionOrderOutClearStr());

            return sbPrint.ToString();
        }

        public static string GetProductionOrderOutContentStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            Point Start;
            int Width = 0;
            int Heigh = 0;

            string BasicFontName = "黑体";
            int BasicFontSize = 1;

            int BaiscColMargin = 0;
            int BasicRowHeigh = 0;
            int MinRowMargin = 0;

            int PictrueTopPad = 0;
            int PictrueRightPad = 0;
            int ROHSMarginQR = 0;
            int QRCodeSize = 0;

            int Line = 0;

            #endregion


            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter

                        Start = new Point(0, 50);
                        Width = 630;
                        Heigh = 472;

                        BasicFontName = "黑体";
                        BasicFontSize = 8;

                        BaiscColMargin = 150;
                        BasicRowHeigh = 50;
                        MinRowMargin = 10;

                        PictrueTopPad = 40;
                        PictrueRightPad = 150;
                        ROHSMarginQR = 220;
                        QRCodeSize = 4;

                        #endregion

                    }
                    break;

                case 300:
                    {
                        #region Parameter

                        Start = new Point(20, 50);
                        Width = 945;
                        Heigh = 705;

                        BasicFontName = "黑体";
                        BasicFontSize = 12;

                        BaiscColMargin = 230;
                        BasicRowHeigh = 90;
                        MinRowMargin = 15;

                        PictrueTopPad = 60;
                        PictrueRightPad = 220;
                        ROHSMarginQR = 330;
                        QRCodeSize = 7;

                        #endregion

                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Content
            fcb.GETFONTHEX(barcode.AndalaNo, false, BasicFontName, "txtAndalaNo", (BasicFontSize - 2) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.CUSNAME, false, BasicFontName, "txtCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE1, false, BasicFontName, "txtMaterialDesc1", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE2, false, BasicFontName, "txtMaterialDesc2", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.QTY.ToString("0"), false, BasicFontName, "txtQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALNO, false, BasicFontName, "txtMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.PRDVERSION, false, BasicFontName, "txtVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.VOUCHERNO, false, BasicFontName, "txtVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.BATCHNO, false, BasicFontName, "txtBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SERIALNO, false, BasicFontName, "txtSerialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            #region Code
            sbPrint.Append("^XA");
            sbPrint.AppendFormat("^PW{0}^LL{1}", Width, Heigh);

            //进仓单号
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtAndalaNo^FS", Width - PictrueRightPad, Start.Y - MinRowMargin);


            Line = 0;   //客户名称
            sbPrint.AppendFormat("^FT{0},{1}^XGlblCusName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtCusName^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 1;   //物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialDesc^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc1^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 2;   //第二行物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc2^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 3;   //数量
            sbPrint.AppendFormat("^FT{0},{1}^XGlblQuantity^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtQuantity^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 4;   //物料编码
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 5;   //产品版本
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVersion^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVersion^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 6;   //生产订单号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVoucherNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVoucherNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 7;  //生产批号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblBatchNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtBatchNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            #region Picture
            //ROHS
            if (barcode.BIsRoSH || barcode.ISROHS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGROHS.GRF,1,1^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad);
            }

            //二维码
            sbPrint.AppendFormat("^FT{0},{1}^BQN,2,{2},H^FDMA,{3}^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad + ROHSMarginQR - MinRowMargin, QRCodeSize, barcode.BARCODE);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSerialNo^FS", Width - PictrueRightPad - dpi / 5, Start.Y + PictrueTopPad + ROHSMarginQR + MinRowMargin * 3);

            #endregion


            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        public static string GetProductionOrderOutLogoStr(int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            string BasicFontName = "黑体";
            int BasicFontSize = 1;
            #endregion

            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter
                        BasicFontName = "黑体";
                        BasicFontSize = 8;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs200);

                        #endregion
                    }
                    break;

                case 300:
                    {
                        #region Parameter
                        BasicFontName = "黑体";
                        BasicFontSize = 12;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs300);

                        #endregion
                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Title
            fcb.GETFONTHEX("客户名称：", false, BasicFontName, "lblCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料描述：", false, BasicFontName, "lblMaterialDesc", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("数　　量：", false, BasicFontName, "lblQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料编码：", false, BasicFontName, "lblMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("产品版本：", false, BasicFontName, "lblVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产订单：", false, BasicFontName, "lblVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产批号：", false, BasicFontName, "lblBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            return sbPrint.ToString();
        }

        public static string GetProductionOrderOutClearStr()
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Delete
            sbPrint.Append("^XA");
            sbPrint.Append("^IDR:ROHS.GRF^FS");
            sbPrint.Append("^IDR:lblCusName^FS");
            sbPrint.Append("^IDR:lblMaterialDesc^FS");
            sbPrint.Append("^IDR:lblQuantity^FS");
            sbPrint.Append("^IDR:lblMaterialNo^FS");
            sbPrint.Append("^IDR:lblVersion^FS");
            sbPrint.Append("^IDR:lblVoucherNo^FS");
            sbPrint.Append("^IDR:lblBatchNo^FS");

            sbPrint.Append("^IDR:txtAndalaNo^FS");
            sbPrint.Append("^IDR:txtCusName^FS");
            sbPrint.Append("^IDR:txtMaterialDesc1^FS");
            sbPrint.Append("^IDR:txtMaterialDesc2^FS");
            sbPrint.Append("^IDR:txtQuantity^FS");
            sbPrint.Append("^IDR:txtMaterialNo^FS");
            sbPrint.Append("^IDR:txtVersion^FS");
            sbPrint.Append("^IDR:txtVoucherNo^FS");
            sbPrint.Append("^IDR:txtBatchNo^FS");
            sbPrint.Append("^IDR:txtSerialno^FS");
            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }
        #endregion

        #region 生产退料单外箱标签

        public static bool PrintProductionReturnOutBarcode(Barcode_Model barcode, string strPrinterName, int dpi = 300)
        {
            string strPrint = GetProductionReturnOutPrintStr(barcode, dpi);

            if (string.IsNullOrEmpty(strPrint)) return false;

            return RawPrinterHelper.SendStringToPrinter(strPrinterName, strPrint);
        }

        public static string GetProductionReturnOutPrintStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            sbPrint.Append(GetProductionReturnOutLogoStr(dpi));

            sbPrint.Append(GetProductionReturnOutContentStr(barcode, dpi));

            sbPrint.Append(GetProductionReturnOutClearStr());

            return sbPrint.ToString();
        }

        public static string GetProductionReturnOutContentStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            Point Start;
            int Width = 0;
            int Heigh = 0;

            string BasicFontName = "黑体";
            int BasicFontSize = 1;

            int BaiscColMargin = 0;
            int BasicRowHeigh = 0;
            int MinRowMargin = 0;

            int PictrueTopPad = 0;
            int PictrueRightPad = 0;
            int ROHSMarginQR = 0;
            int QRCodeSize = 0;

            int Line = 0;

            string strReserveNumber = string.IsNullOrEmpty(barcode.ReserveRowNo) ? barcode.ReserveNumber : string.Format("{0} - {1}", barcode.ReserveNumber, barcode.ReserveRowNo);

            #endregion


            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter

                        Start = new Point(0, 50);
                        Width = 630;
                        Heigh = 472;

                        BasicFontName = "黑体";
                        BasicFontSize = 8;

                        BaiscColMargin = 180;
                        BasicRowHeigh = 45;
                        MinRowMargin = 10;

                        PictrueTopPad = 40;
                        PictrueRightPad = 180;
                        ROHSMarginQR = 220;
                        QRCodeSize = 4;

                        #endregion

                    }
                    break;

                case 300:
                    {
                        #region Parameter

                        Start = new Point(20, 50);
                        Width = 945;
                        Heigh = 705;

                        BasicFontName = "黑体";
                        BasicFontSize = 12;

                        BaiscColMargin = 230;
                        BasicRowHeigh = 75;
                        MinRowMargin = 20;

                        PictrueTopPad = 60;
                        PictrueRightPad = 220;
                        ROHSMarginQR = 330;
                        QRCodeSize = 7;

                        #endregion

                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Content
            fcb.GETFONTHEX(barcode.CUSNAME, false, BasicFontName, "txtCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE1, false, BasicFontName, "txtMaterialDesc1", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE2, false, BasicFontName, "txtMaterialDesc2", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.QTY.ToString("0"), false, BasicFontName, "txtQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALNO, false, BasicFontName, "txtMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.PRDVERSION, false, BasicFontName, "txtVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.TrackNo, false, BasicFontName, "txtTrackNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strReserveNumber, false, BasicFontName, "txtReserveNumber", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.VOUCHERNO, false, BasicFontName, "txtVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.BATCHNO, false, BasicFontName, "txtBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SERIALNO, false, BasicFontName, "txtSerialno", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            #region Code
            sbPrint.Append("^XA");
            sbPrint.AppendFormat("^PW{0}^LL{1}", Width, Heigh);


            Line = 0;   //客户名称
            sbPrint.AppendFormat("^FT{0},{1}^XGlblCusName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtCusName^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 1;   //物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialDesc^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc1^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 2;   //第二行物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc2^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 3;   //数量
            sbPrint.AppendFormat("^FT{0},{1}^XGlblQuantity^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtQuantity^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 4;   //物料编码
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 5;   //产品版本
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVersion^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVersion^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 6;   //作业单号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblTrackNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtTrackNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 7;   //预留单号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblReserveNumber^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtReserveNumber^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 8;   //退料单号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVoucherNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVoucherNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 9;  //生产批号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblBatchNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtBatchNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            #region Picture
            //ROHS
            if (barcode.BIsRoSH || barcode.ISROHS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGROHS.GRF,1,1^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad);
            }

            //二维码
            sbPrint.AppendFormat("^FT{0},{1}^BQN,2,{2},H^FDMA,{3}^FS", Width - PictrueRightPad - dpi / 5, Start.Y + PictrueTopPad + ROHSMarginQR - MinRowMargin, QRCodeSize, barcode.BARCODE);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSerialno^FS", Width - PictrueRightPad - dpi / 3, Start.Y + PictrueTopPad + ROHSMarginQR + MinRowMargin * 3);
            #endregion


            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        public static string GetProductionReturnOutLogoStr(int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            string BasicFontName = "黑体";
            int BasicFontSize = 1;
            #endregion

            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter
                        BasicFontName = "黑体";
                        BasicFontSize = 8;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs200);

                        #endregion
                    }
                    break;

                case 300:
                    {
                        #region Parameter
                        BasicFontName = "黑体";
                        BasicFontSize = 12;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs300);

                        #endregion
                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Title
            fcb.GETFONTHEX("客户名称：", false, BasicFontName, "lblCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料描述：", false, BasicFontName, "lblMaterialDesc", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("数　　量：", false, BasicFontName, "lblQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料编码：", false, BasicFontName, "lblMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("产品版本：", false, BasicFontName, "lblVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("作业单号：", false, BasicFontName, "lblTrackNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("预留号　：", false, BasicFontName, "lblReserveNumber", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退料单号：", false, BasicFontName, "lblVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产批号：", false, BasicFontName, "lblBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            return sbPrint.ToString();
        }

        public static string GetProductionReturnOutClearStr()
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Delete
            sbPrint.Append("^XA");
            sbPrint.Append("^IDR:ROHS.GRF^FS");
            sbPrint.Append("^IDR:lblCusName^FS");
            sbPrint.Append("^IDR:lblMaterialDesc^FS");
            sbPrint.Append("^IDR:lblQuantity^FS");
            sbPrint.Append("^IDR:lblMaterialNo^FS");
            sbPrint.Append("^IDR:lblVersion^FS");
            sbPrint.Append("^IDR:lblTrackNo^FS");
            sbPrint.Append("^IDR:lblReserveNumber^FS");
            sbPrint.Append("^IDR:lblVoucherNo^FS");
            sbPrint.Append("^IDR:lblBatchNo^FS");

            sbPrint.Append("^IDR:txtCusName^FS");
            sbPrint.Append("^IDR:txtMaterialDesc1^FS");
            sbPrint.Append("^IDR:txtMaterialDesc2^FS");
            sbPrint.Append("^IDR:txtQuantity^FS");
            sbPrint.Append("^IDR:txtMaterialNo^FS");
            sbPrint.Append("^IDR:txtVersion^FS");
            sbPrint.Append("^IDR:txtTrackNo^FS");
            sbPrint.Append("^IDR:txtReserveNumber^FS");
            sbPrint.Append("^IDR:txtVoucherNo^FS");
            sbPrint.Append("^IDR:txtBatchNo^FS");
            sbPrint.Append("^IDR:txtSerialno^FS");
            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        #endregion

        #region 检验不合格原材料退货外箱标签

        public static bool PrintQualityReturnOutBarcode(Barcode_Model barcode, string strPrinterName, int dpi = 300)
        {
            string strPrint = GetProductionReturnOutPrintStr(barcode, dpi);

            if (string.IsNullOrEmpty(strPrint)) return false;

            return RawPrinterHelper.SendStringToPrinter(strPrinterName, strPrint);
        }

        public static string GetQualityReturnOutPrintStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            sbPrint.Append(GetProductionReturnOutLogoStr(dpi));

            sbPrint.Append(GetProductionReturnOutContentStr(barcode, dpi));

            sbPrint.Append(GetProductionReturnOutClearStr());

            return sbPrint.ToString();
        }

        public static string GetQualityReturnOutContentStr(Barcode_Model barcode, int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            Point Start;
            int Width = 0;
            int Heigh = 0;

            string BasicFontName = "黑体";
            int BasicFontSize = 1;

            int BaiscColMargin = 0;
            int BasicRowHeigh = 0;
            int MinRowMargin = 0;

            int PictrueTopPad = 0;
            int PictrueRightPad = 0;
            int ROHSMarginQR = 0;
            int QRCodeSize = 0;

            int Line = 0;

            string strTrackNo = barcode.TrackNo;    //string.IsNullOrEmpty(barcode.ROWNO) ? barcode.TrackNo : string.Format("{0} - {1}", barcode.TrackNo, barcode.ROWNO);
            string strReserveNumber = string.IsNullOrEmpty(barcode.ReserveRowNo) ? barcode.ReserveNumber : string.Format("{0} - {1}", barcode.ReserveNumber, barcode.ReserveRowNo);

            #endregion


            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter

                        Start = new Point(0, 50);
                        Width = 630;
                        Heigh = 472;

                        BasicFontName = "黑体";
                        BasicFontSize = 8;

                        BaiscColMargin = 150;
                        BasicRowHeigh = 30;
                        MinRowMargin = 10;

                        PictrueTopPad = 40;
                        PictrueRightPad = 150;
                        ROHSMarginQR = 220;
                        QRCodeSize = 4;

                        #endregion

                    }
                    break;

                case 300:
                    {
                        #region Parameter

                        Start = new Point(20, 50);
                        Width = 945;
                        Heigh = 705;

                        BasicFontName = "黑体";
                        BasicFontSize = 12;

                        BaiscColMargin = 230;
                        BasicRowHeigh = 50;
                        MinRowMargin = 20;

                        PictrueTopPad = 60;
                        PictrueRightPad = 220;
                        ROHSMarginQR = 330;
                        QRCodeSize = 7;

                        #endregion

                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Content
            fcb.GETFONTHEX(barcode.Department, false, BasicFontName, "txtDepartment", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.VOUCHERNO, false, BasicFontName, "txtVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strTrackNo, false, BasicFontName, "txtTrackNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strReserveNumber, false, BasicFontName, "txtReserveNumber", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALNO, false, BasicFontName, "txtMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE1, false, BasicFontName, "txtMaterialDesc1", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALDESCLINE2, false, BasicFontName, "txtMaterialDesc2", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.QTY.ToString("0"), false, BasicFontName, "txtQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.Reason, false, BasicFontName, "txtReason", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SUPNAME, false, BasicFontName, "txtSupplier", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(DateTime.Now.ToString("yyyy-MM-dd"), false, BasicFontName, "txtDate", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.ReserveUser, false, BasicFontName, "txtUser", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.BATCHNO, false, BasicFontName, "txtBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(" ", false, BasicFontName, "txtConfirm", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.SERIALNO, false, BasicFontName, "txtSerialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            #region Code
            sbPrint.Append("^XA");
            sbPrint.AppendFormat("^PW{0}^LL{1}", Width, Heigh);


            Line = 1;   //标签头
            sbPrint.AppendFormat("^FT{0},{1}^XGlblTitle^FS", Start.X + BasicRowHeigh + Width / 3, Start.Y + BasicRowHeigh * Line);

            Line = 2;   //退仓部门
            sbPrint.AppendFormat("^FT{0},{1}^XGlblDepartment^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtDepartment^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 3;   //退料单
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVoucherNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVoucherNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 4;   //生产订单
            sbPrint.AppendFormat("^FT{0},{1}^XGlblTrackNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtTrackNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 5;   //作业单预留
            sbPrint.AppendFormat("^FT{0},{1}^XGlblReserveNumber^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtReserveNumber^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 6;   //物料编码
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 7;   //物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialDesc^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc1^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 8;   //第二行物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc2^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 9;   //退仓数量
            sbPrint.AppendFormat("^FT{0},{1}^XGlblQuantity^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtQuantity^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 10;   //退仓原因
            sbPrint.AppendFormat("^FT{0},{1}^XGlblReason^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtReason^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 11;   //供应商
            sbPrint.AppendFormat("^FT{0},{1}^XGlblSupplier^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSupplier^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 12;   //退仓日期$退仓人
            sbPrint.AppendFormat("^FT{0},{1}^XGlblDate^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtDate^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGlblUser^FS", Start.X + BasicRowHeigh + BaiscColMargin * 2, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtUser^FS", Start.X + BaiscColMargin * 3, Start.Y + BasicRowHeigh * Line);

            Line = 13;   //退仓批次&质检确认
            sbPrint.AppendFormat("^FT{0},{1}^XGlblBatchNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtBatchNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGlblConfirm^FS", Start.X + BasicRowHeigh + BaiscColMargin * 2, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtConfirm^FS", Start.X + BaiscColMargin * 3, Start.Y + BasicRowHeigh * Line);


            #region Picture
            //ROHS
            if (barcode.BIsRoSH || barcode.ISROHS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGROHS.GRF,1,1^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad);
            }

            //二维码
            sbPrint.AppendFormat("^FT{0},{1}^BQN,2,{2},H^FDMA,{3}^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad + ROHSMarginQR - MinRowMargin, QRCodeSize, barcode.BARCODE);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSerialNo^FS", Width - PictrueRightPad - dpi / 5, Start.Y + PictrueTopPad + ROHSMarginQR + MinRowMargin * 3);
            #endregion


            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        public static string GetQualityReturnOutLogoStr(int dpi = 300)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            string BasicFontName = "黑体";
            int BasicFontSize = 1;
            #endregion

            switch (dpi)
            {
                case 200:
                    {
                        #region Parameter
                        BasicFontName = "黑体";
                        BasicFontSize = 8;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs200);

                        #endregion
                    }
                    break;

                case 300:
                    {
                        #region Parameter
                        BasicFontName = "黑体";
                        BasicFontSize = 12;
                        #endregion

                        #region LOGO
                        sbPrint.Append(Rohs300);

                        #endregion
                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Title
            fcb.GETFONTHEX("退料标签", false, BasicFontName, "lblTitle", (BasicFontSize + 4) * 3, 0, true, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退仓部门：", false, BasicFontName, "lblDepartment", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退料单　：", false, BasicFontName, "lblVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产订单：", false, BasicFontName, "lblTrackNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("作业单预留：", false, BasicFontName, "lblReserveNumber", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料编码：", false, BasicFontName, "lblMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料描述：", false, BasicFontName, "lblMaterialDesc", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退仓数量：", false, BasicFontName, "lblQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退仓原因：", false, BasicFontName, "lblReason", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("供应商　：", false, BasicFontName, "lblSupplier", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退仓日期：", false, BasicFontName, "lblDate", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退仓人　：", false, BasicFontName, "lblUser", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("质检确认：", false, BasicFontName, "lblConfirm", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("退仓批次：", false, BasicFontName, "lblBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            return sbPrint.ToString();
        }

        public static string GetQualityReturnOutClearStr()
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Delete
            sbPrint.Append("^XA");
            sbPrint.Append("^IDR:lblTitle^FS");
            sbPrint.Append("^IDR:lblDepartment^FS");
            sbPrint.Append("^IDR:lblVoucherNo^FS");
            sbPrint.Append("^IDR:lblTrackNo^FS");
            sbPrint.Append("^IDR:lblReserveNumber^FS");
            sbPrint.Append("^IDR:lblMaterialNo^FS");
            sbPrint.Append("^IDR:lblMaterialDesc^FS");
            sbPrint.Append("^IDR:lblQuantity^FS");
            sbPrint.Append("^IDR:lblReason^FS");
            sbPrint.Append("^IDR:lblSupplier^FS");
            sbPrint.Append("^IDR:lblDate^FS");
            sbPrint.Append("^IDR:lblUser^FS");
            sbPrint.Append("^IDR:lblConfirm^FS");
            sbPrint.Append("^IDR:lblBatchNo^FS");

            sbPrint.Append("^IDR:txtDepartment^FS");
            sbPrint.Append("^IDR:txtTrackNo^FS");
            sbPrint.Append("^IDR:txtVoucherNo^FS");
            sbPrint.Append("^IDR:txtReserveNumber^FS");
            sbPrint.Append("^IDR:txtMaterialDesc1^FS");
            sbPrint.Append("^IDR:txtMaterialDesc2^FS");
            sbPrint.Append("^IDR:txtQuantity^FS");
            sbPrint.Append("^IDR:txtMaterialNo^FS");
            sbPrint.Append("^IDR:txtReason^FS");
            sbPrint.Append("^IDR:txtSupplier^FS");
            sbPrint.Append("^IDR:txtDate^FS");
            sbPrint.Append("^IDR:txtUser^FS");
            sbPrint.Append("^IDR:txtConfirm^FS");
            sbPrint.Append("^IDR:txtBatchNo^FS");
            sbPrint.Append("^IDR:txtSerialNo^FS");
            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }

        #endregion

        #region 产品序列号标签

        #endregion

        #region 产品物料号标签

        #endregion

        #region 分拣标签

        #endregion

        #region 货位标签

        public static bool PrintArea(string strAreaNo, string strPrinterName, int pdi = 200)
        {
            string strPrint = GetAreaPrintStr(strAreaNo, pdi);

            if (string.IsNullOrEmpty(strPrint)) return false;

            return RawPrinterHelper.SendStringToPrinter(strPrinterName, strPrint);
        }

        public static string GetAreaPrintStr(string strAreaNo, int pdi = 200)
        {
            StringBuilder sbPrint = new StringBuilder();
            switch (pdi)
            {
                case 200:
                    {
                        Point Start = new Point(90, 10);
                        if (string.IsNullOrEmpty(strAreaNo)) strAreaNo = "";

                        sbPrint.Append(Logo200);

                        StringBuilder sbReturn = new StringBuilder(10240);
                        FontConvertBmp fcb = new FontConvertBmp();
                        string strNote = string.Empty;
                        //if (strAreaNo.Length == 9)
                        //{
                        //    strNote = string.Format("仓库编号（{0}）+货区编号（{1}）+格编号（{2}）+层编号（{3}）", strAreaNo.Substring(0, 2), strAreaNo.Substring(2, 3), strAreaNo.Substring(5, 2), strAreaNo.Substring(7));
                        //}
                        //else
                        //{
                        //    strNote = string.Format("仓库编号（{0}）+货区编号（{1}）+格编号（{2}）+层编号（{3}）", "XX", "XXX", "XX", "XX");
                        //}
                        strNote = strAreaNo;
                        fcb.GETFONTHEX(strNote, false, "微软雅黑", "sNote", 64, 0, true, false, sbReturn);
                        sbPrint.Append(sbReturn.ToString());

                        sbPrint.Append("^XA");
                        sbPrint.Append("^MMT");
                        sbPrint.Append("^PW559");
                        sbPrint.Append("^LL0360");
                        sbPrint.Append("^LS0");
                        sbPrint.Append("^FT70,342^XGsNote,1,1^FS");
                        sbPrint.Append("^BY3,3,216^FT60,239^BCN,,N,N");
                        sbPrint.AppendFormat("^FD>:{0}^FS", strAreaNo);
                        sbPrint.Append("^PQ1,0,1,Y^XZ");
                        //sbPrint.Append("^XA^IDGHeader.GRF^FS^XZ");
                        //^MMT
                        //^PW559
                        //^LL0360
                        //^LS0
                        //^FT96,352^XG000.GRF,1,1^FS
                        //^BY3,3,216^FT60,239^BCN,,N,N
                        //^FD>:44-C1-0-01^FS
                        //^PQ1,0,1,Y^XZ
                        //^XA^ID000.GRF^FS^XZ
                        //sbPrint.Append("^PW800^LL0600");

                        //sbPrint.Append("^FO90,10^XGHeader.GRF^FS");
                        //sbPrint.AppendFormat("^FO{0},{1}^XGHeader.GRF^FS", Start.X, Start.Y);

                        //sbPrint.Append("^FO150,120^BY4,3,250^BCN,,Y,N^FD" + strAreaNo + "^FS");    // 一维码
                        //sbPrint.AppendFormat("^FO{0},{1}^BY4,3,250^BCN,,Y,N^FD{2}^FS", Start.X + 60, Start.Y + 110, strAreaNo);

                        //sbPrint.Append("^FO100,430^XGsNote^FS");
                        //sbPrint.AppendFormat("^FO{0},{1}^XGsNote^FS", Start.X + 10, Start.Y + 420);

                        //sbPrint.Append("^XZ");
                    }
                    break;

                case 300:
                    {
                        Point Start = new Point(90, 10);
                        if (string.IsNullOrEmpty(strAreaNo)) strAreaNo = "";

                        sbPrint.Append(Logo200);

                        StringBuilder sbReturn = new StringBuilder(10240);
                        FontConvertBmp fcb = new FontConvertBmp();
                        string strNote = string.Empty;
                        strNote = strAreaNo;
                        fcb.GETFONTHEX(strNote, false, "微软雅黑", "sNote", 64, 0, true, false, sbReturn);
                        sbPrint.Append(sbReturn.ToString());

                        sbPrint.Append("^XA");
                        sbPrint.Append("^MMT");
                        sbPrint.Append("^PW559");
                        sbPrint.Append("^LL0360");
                        sbPrint.Append("^LS0");
                        sbPrint.Append("^FT70,342^XGsNote,1,1^FS");
                        sbPrint.Append("^BY3,3,216^FT60,239^BCN,,N,N");
                        sbPrint.AppendFormat("^FD>:{0}^FS", strAreaNo);
                        sbPrint.Append("^PQ1,0,1,Y^XZ");
                        //Point Start = new Point(20, 10);
                        //if (string.IsNullOrEmpty(strAreaNo)) strAreaNo = "";

                        //sbPrint.Append(Logo300);

                        //StringBuilder sbReturn = new StringBuilder(10240);
                        //FontConvertBmp fcb = new FontConvertBmp();
                        //string strNote = string.Empty;
                        //if (strAreaNo.Length == 9)
                        //{
                        //    strNote = string.Format("仓库编号（{0}）+货区编号（{1}）+格编号（{2}）+层编号（{3}）", strAreaNo.Substring(0, 2), strAreaNo.Substring(2, 3), strAreaNo.Substring(5, 2), strAreaNo.Substring(7));
                        //}
                        //else
                        //{
                        //    strNote = string.Format("仓库编号（{0}）+货区编号（{1}）+格编号（{2}）+层编号（{3}）", "XX", "XXX", "XX", "XX");
                        //}

                        //fcb.GETFONTHEX(strNote, false, "微软雅黑", "sNote", 27, 0, true, false, sbReturn);
                        //sbPrint.Append(sbReturn.ToString());

                        //sbPrint.Append("^XA");
                        //sbPrint.Append("^PW1000^LL0600");

                        ////sbPrint.Append("^FO90,10^XGHeader.GRF^FS");
                        //sbPrint.AppendFormat("^FO{0},{1}^XGHeader.GRF^FS", Start.X, Start.Y);

                        ////sbPrint.Append("^FO150,120^BY4,3,250^BCN,,Y,N^FD" + strAreaNo + "^FS");    // 一维码
                        //sbPrint.AppendFormat("^FO{0},{1}^BY6,3,400^BCN,,Y,N^FD{2}^FS", Start.X + 50, Start.Y + 150, strAreaNo);

                        ////sbPrint.Append("^FO100,430^XGsNote^FS");
                        //sbPrint.AppendFormat("^FO{0},{1}^XGsNote^FS", Start.X + 10, Start.Y + 630);

                        //sbPrint.Append("^XZ");
                    }
                    break;
            }

            //删除图片
            sbPrint.Append("^XA");
            sbPrint.Append("^IDR:sNote^FS");
            sbPrint.Append("^XZ");
            return sbPrint.ToString();
        }
        #endregion

        public static string GetTempAreaPrintStr(string strAreaNo)
        {
            StringBuilder sbPrint = new StringBuilder();
            Point Start = new Point(90, 10);
            if (string.IsNullOrEmpty(strAreaNo)) strAreaNo = "";

            sbPrint.Append(Logo200);

            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();
            string strNote = string.Empty;
            strNote = strAreaNo;
            fcb.GETFONTHEX("(临)" + strNote, false, "微软雅黑", "sNote", 64, 0, true, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            sbPrint.Append("^XA");
            sbPrint.Append("^MMT");
            sbPrint.Append("^PW599");
            sbPrint.Append("^LL0360");
            sbPrint.Append("^LS0");
            sbPrint.Append("^FT10,342^XGsNote,1,1^FS");
            sbPrint.Append("^BY3,3,216^FT60,239^BCN,,N,N");
            sbPrint.AppendFormat("^FD>:{0}^FS", strAreaNo);
            sbPrint.Append("^PQ1,0,1,Y^XZ");
            //删除图片
            sbPrint.Append("^XA");
            sbPrint.Append("^IDR:sNote^FS");
            sbPrint.Append("^XZ");
            return sbPrint.ToString();
        }

        #endregion

        #region Test

        public static bool PrintTest(Barcode_Model barcode, string strPrinterName, int dpi = 300, int StartX = 0, int StartY = 0, int Width = 0, int Heigh = 0, string BasicFontName = "黑体", int BasicFontSize = 1, int BaiscColMargin = 0, int BasicRowHeigh = 0, int MinRowMargin = 0, int PictrueTopPad = 0, int PictrueRightPad = 0, int CheckedMargin = 0, int CheckedOffset = 0)
        {
            StringBuilder sbPrint = new StringBuilder();

            sbPrint.Append(GetPrintTestLogoStr(dpi, BasicFontName, BasicFontSize)).Append(Environment.NewLine);

            sbPrint.Append(GetPrintTestContenctStr(barcode, dpi, StartX, StartY, Width, Heigh, BasicFontName, BasicFontSize, BaiscColMargin, BasicRowHeigh, MinRowMargin, PictrueTopPad, PictrueRightPad, CheckedMargin, CheckedOffset)).Append(Environment.NewLine);

            sbPrint.Append(GetDeliveryReceiceOutClearStr()).Append(Environment.NewLine);

            string strPrint = sbPrint.ToString();

            if (string.IsNullOrEmpty(strPrint)) return false;

            return RawPrinterHelper.SendStringToPrinter(strPrinterName, strPrint);
        }

        public static string GetPrintTestContenctStr(Barcode_Model barcode, int dpi = 300, int StartX = 0, int StartY = 0, int Width = 0, int Heigh = 0, string BasicFontName = "黑体", int BasicFontSize = 1, int BaiscColMargin = 0, int BasicRowHeigh = 0, int MinRowMargin = 0, int PictrueTopPad = 0, int PictrueRightPad = 0, int CheckedMargin = 0, int CheckedOffset = 0)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            Point Start = new Point(StartX, StartY);

            int Line = 0;

            string strDesc1 = string.Empty;
            string strDesc2 = string.Empty;
            if (!string.IsNullOrEmpty(barcode.MATERIALDESC))
            {
                if (barcode.MATERIALDESC.Length <= 20)
                {
                    strDesc1 = barcode.MATERIALDESC;
                }
                else
                {
                    strDesc1 = barcode.MATERIALDESC.Substring(0, 20);
                    strDesc2 = barcode.MATERIALDESC.Substring(20, barcode.MATERIALDESC.Length - 20);
                }
            }
            string strSerial1 = string.Empty;
            string strSerial2 = string.Empty;
            if (!string.IsNullOrEmpty(barcode.SERIALNO))
            {
                if (barcode.SERIALNO.Length >= 12)
                {
                    strSerial1 = barcode.SERIALNO.Substring(0, 8);
                    strSerial2 = barcode.SERIALNO.Substring(barcode.SERIALNO.Length - 4, 4);
                }
            }

            #endregion

            #region Content
            fcb.GETFONTHEX(barcode.CUSNAME, false, BasicFontName, "txtCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strDesc1, false, BasicFontName, "txtMaterialDesc1", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strDesc2, false, BasicFontName, "txtMaterialDesc2", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.QTY.ToString("0"), false, BasicFontName, "txtQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.MATERIALNO, false, BasicFontName, "txtMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.PRDVERSION, false, BasicFontName, "txtVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.VOUCHERNO, false, BasicFontName, "txtVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(barcode.BATCHNO, false, BasicFontName, "txtBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strSerial1, false, BasicFontName, "txtSerialno1", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX(strSerial2, false, BasicFontName, "txtSerialno2", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            #region Code
            sbPrint.Append("^XA");
            sbPrint.AppendFormat("^PW{0}^LL{1}", Width, Heigh);


            Line = 0;   //客户名称
            sbPrint.AppendFormat("^FT{0},{1}^XGlblCusName^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtCusName^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 1;   //物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialDesc^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc1^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 2;   //第二行物料描述
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialDesc2^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 3;   //数量
            sbPrint.AppendFormat("^FT{0},{1}^XGlblQuantity^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtQuantity^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 4;   //物料编码
            sbPrint.AppendFormat("^FT{0},{1}^XGlblMaterialNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtMaterialNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 5;   //产品版本
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVersion^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVersion^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 6;   //生产订单号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblVoucherNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtVoucherNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            Line = 7;   //镀层物料
            sbPrint.AppendFormat("^FT{0},{1}^XGlblPlated^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedSilver^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedTin^FS", Start.X + BaiscColMargin + CheckedMargin, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGcbxPlatedOther^FS", Start.X + BaiscColMargin + 2 * CheckedMargin, Start.Y + BasicRowHeigh * Line);
            //勾选
            if (barcode.BPlatedSilver || barcode.PLATEDSILVER == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }
            else if (barcode.BPlatedTin || barcode.PLATEDTIN == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin + CheckedMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }
            else if (barcode.BPlatedOther || barcode.OTHERS == 2)
            {
                sbPrint.AppendFormat("^FT{0},{1}^XGcbxChecked^FS", Start.X + BaiscColMargin + 2 * CheckedMargin - CheckedOffset, Start.Y + BasicRowHeigh * Line - CheckedOffset);
            }

            Line = 8;  //生产批号
            sbPrint.AppendFormat("^FT{0},{1}^XGlblBatchNo^FS", Start.X, Start.Y + BasicRowHeigh * Line);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtBatchNo^FS", Start.X + BaiscColMargin, Start.Y + BasicRowHeigh * Line);

            #region Picture
            //ROHS
            sbPrint.AppendFormat("^FT{0},{1}^XGROHS.GRF,1,1^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad);

            //二维码
            sbPrint.AppendFormat("^FT{0},{1}^BQN,2,4,H^FDM,{2}^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad + 7 * BasicRowHeigh - MinRowMargin, barcode.BARCODE);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSerialno1^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad + 7 * BasicRowHeigh - MinRowMargin);
            sbPrint.AppendFormat("^FT{0},{1}^XGtxtSerialno2^FS", Width - PictrueRightPad, Start.Y + PictrueTopPad + 7 * BasicRowHeigh + MinRowMargin);

            #endregion


            sbPrint.Append("^XZ");

            #endregion

            return sbPrint.ToString();
        }



        public static string GetPrintTestLogoStr(int dpi = 300, string BasicFontName = "黑体", int BasicFontSize = 1)
        {
            StringBuilder sbPrint = new StringBuilder();

            #region Ready
            StringBuilder sbReturn = new StringBuilder(10240);
            FontConvertBmp fcb = new FontConvertBmp();

            #endregion

            switch (dpi)
            {
                case 200:
                    {
                        #region LOGO
                        sbPrint.Append("~DGROHS.GRF,01536,016,,:::::0FgIF8,05DgHDC,0FgIF8,040gG014,0C0gH08,040gG01C,0C0gH08,040gG014,0C0gH08,040gG01C,0C0gH08,040ggH08,040gG014,0C0gH08,040gG01C,0C0gH08,040gG014,0C0gH08,040gG01C,0C0gH08,040gG014,0C0gH08,040gG01C,0C0gH08,040gG014,0C0gH08,040gG01C,0C0gH08,040gG014,0C0gH08,040gG01C,0E020202020202020202020208,07gI74,0FgIF8,05FDHDFDHDFDHDFDHDFDHDFDDC,H0202020202020202020202020,,::::::::::::::::::");

                        #endregion
                    }
                    break;

                case 300:
                    {
                        #region LOGO
                        sbPrint.Append("~DGROHS.GRF,02560,020,,::::08gV8,,0BFgTFE,07gU74,0FgUFE,05FDHDFDHDFDHDFDHDFDHDFDHDFDHDFDHDFDDC,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gJ0FE80K0E,040ggS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0A80gS0E,070gS014,0E80gS0E,040gS01C,0AA0202020202020202020202020202020203E,070gS014,0FgUFE,05DgTDC,0BFgTFE,07gU74,08gV8,,:::::::::::::");

                        #endregion
                    }
                    break;

                default:
                    return string.Empty;
            }

            #region Title
            fcb.GETFONTHEX("客户名称：", false, BasicFontName, "lblCusName", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料描述：", false, BasicFontName, "lblMaterialDesc", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("数　　量：", false, BasicFontName, "lblQuantity", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("物料编码：", false, BasicFontName, "lblMaterialNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("产品版本：", false, BasicFontName, "lblVersion", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产订单：", false, BasicFontName, "lblVoucherNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("镀层物料：", false, BasicFontName, "lblPlated", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口镀银", false, BasicFontName, "cbxPlatedSilver", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口镀锡", false, BasicFontName, "cbxPlatedTin", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("口其他", false, BasicFontName, "cbxPlatedOther", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("■", false, BasicFontName, "cbxChecked", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());
            fcb.GETFONTHEX("生产批号：", false, BasicFontName, "lblBatchNo", (BasicFontSize) * 3, 0, false, false, sbReturn);
            sbPrint.Append(sbReturn.ToString());

            #endregion

            return sbPrint.ToString();
        }
        #endregion
    }
}
